/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/films": {
    get: operations["films"];
  };
  "/films/{id}": {
    get: operations["film"];
  };
  "/people": {
    get: operations["people"];
  };
  "/people/{id}": {
    get: operations["person"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    /** @description Error */
    readonly Error: {
      readonly message: string;
    };
    /** @description Not Found */
    readonly NotFound: {
      /** @enum {string} */
      readonly message: "Not Found";
    };
    /** @description cursor pagination response */
    readonly CursorPaginationResponse: {
      /** @description Information to aid in pagination. */
      readonly pageInfo: {
        readonly endCursor?: string;
        readonly hasNextPage: boolean;
        readonly hasPreviousPage: boolean;
        readonly startCursor?: string;
      };
      readonly totalCount: number;
    };
    readonly Films: components["schemas"]["CursorPaginationResponse"] & {
      readonly items: readonly (components["schemas"]["Film"])[];
    };
    /** @description Film */
    readonly Film: {
      readonly id: string;
      readonly title: string;
      readonly episode_id: number;
      readonly opening_crawl: string;
      readonly director?: string;
      readonly producer?: readonly (string)[];
      /** Format: date */
      readonly release_date?: string;
      readonly characters?: readonly (string)[];
      readonly planets?: readonly (string)[];
      readonly starships?: readonly (string)[];
      readonly vehicles?: readonly (string)[];
      readonly species?: readonly (string)[];
      readonly created?: string;
      readonly edited?: string;
    };
    readonly People: components["schemas"]["CursorPaginationResponse"] & {
      readonly items: readonly (components["schemas"]["Person"])[];
    };
    /** @description Person */
    readonly Person: {
      readonly id: string;
      readonly name: string;
      readonly height?: number;
      readonly mass?: number;
      readonly hair_color?: readonly (string)[];
      readonly skin_color?: readonly (string)[];
      readonly eye_color?: readonly (string)[];
      readonly birth_year?: string;
      readonly gender?: string;
      readonly homeworld?: string;
      readonly films?: readonly (string)[];
      readonly vehicles?: readonly (string)[];
      readonly starships?: readonly (string)[];
      readonly created?: string;
      readonly edited?: string;
    };
  };
  responses: {
    /** @description Unauthorized */
    readonly Unauthorized: {
      content: {
        readonly "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description list length to fetch */
    readonly length: number;
    /** @description start cursor to fetch */
    readonly cursor: string;
    /** @description the direction of pagination */
    readonly direction: "asc" | "desc";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {

  films: {
    parameters: {
      query: {
        length: components["parameters"]["length"];
        cursor?: components["parameters"]["cursor"];
        direction: components["parameters"]["direction"];
      };
    };
    responses: {
      /** @description films response */
      200: {
        content: {
          readonly "application/json": components["schemas"]["Films"];
        };
      };
    };
  };
  film: {
    parameters: {
      path: {
        /** @description ID of films */
        id: string;
      };
    };
    responses: {
      /** @description film */
      200: {
        content: {
          readonly "application/json": components["schemas"]["Film"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  people: {
    parameters: {
      query: {
        length: components["parameters"]["length"];
        cursor?: components["parameters"]["cursor"];
        direction: components["parameters"]["direction"];
      };
    };
    responses: {
      /** @description people response */
      200: {
        content: {
          readonly "application/json": components["schemas"]["People"];
        };
      };
    };
  };
  person: {
    parameters: {
      path: {
        /** @description ID of people */
        id: string;
      };
    };
    responses: {
      /** @description person */
      200: {
        content: {
          readonly "application/json": components["schemas"]["Person"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
};
